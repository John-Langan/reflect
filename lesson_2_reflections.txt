What happens when you initialize a repository? Why do you need to do it?
The directory comes under the control of git. So we can tracke changes to the files in the directory as I work on the files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a half way house between the working directory and the repository. The content has been added to the directory but has not yet been committed to the project. It is not yet under version control.

How can you use the staging area to make sure you have one commit per logical change?
By using git diff and git diff --staged to track the changes being made to the files and project.

What are some situations when branches would be helpful in keeping your history organized? How would branches help? 
They help in keeping the production quality code in the master branch so that can be publicly available. Other branches can be created to work on new features or for experimental code which may or may not be shared with other people. 

How do the diagrams help you visualize the branch structure?
They show the branch structure produced by the commits made as the various parts of the code are developed. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
All the commits that have taken place in each of the branches are now present in a single file. The master file is updated with the work done in a branch that is ready to be in the main project. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic saves time if there are no conflicts. Manual is needed if conflicts arise from the work of different developers working on the same files. They need to discuss the changes so they can agree on the final version and then merge manually.
